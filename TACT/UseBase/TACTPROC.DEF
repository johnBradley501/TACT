DEFINITION MODULE TACTProcesses;

(* copyright (c) 1987-96 John Bradley, Lidio Presutti, University of Toronto *)

(* Licensed under the Apache License, Version 2.0 (the "License");             *)
(* you may not use this file except in compliance with the License.            *)
(* You may obtain a copy of the License at                                     *)
(* http://www.apache.org/licenses/LICENSE-2.0                                  *)
(*                                                                             *)
(* Unless required by applicable law or agreed to in writing, software         *)
(* distributed under the License is distributed on an "AS IS" BASIS,           *)
(* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    *)
(* See the License for the specific language governing permissions and         *)
(* limitations under the License.                                              *)

(* Modelled after version in "Software Development with Modula-2,
Gary A.Ford & Richard S. Wiener, Wiley Press 1986, pp.295-96

We didn't use the Processes Module provided with Logitech's
Modula-2 because there is no TERMINATE process in it.  *)

(* This module provides a process synchronization abstraction
based on general (non-binary) semaphores.  It also provdes
additional capabilities to support various process communication
abstractions.   *)

FROM SYSTEM IMPORT
  (* type    *)  ADDRESS;

(*
EXPORT QUALIFIED
  (* const   *)  nullprocess,
  (* type    *)  SIGNAL, processid,
  (* var     *)  DoRead, currentprocess,
  (* proc    *)  Init, Dispose, SEND, WAIT, Awaited, (* for signals   *)
                 StartProcess, Terminate, equal,     (* for processes *)
                 BeginTACTProcesses;
*)

TYPE
(* kludge change to allow new JPI compiler to work!!   j.b.
  SIGNAL; *)
  SIGNAL    = POINTER TO semaphore;
  processid;

VAR
   nullprocess      : processid;
   DoRead           : SIGNAL;
   currentprocess   : processid;

PROCEDURE Init(VAR s: SIGNAL (* out *) );

PROCEDURE Dispose(VAR s: SIGNAL (* out *) );

PROCEDURE SEND(VAR s: SIGNAL (* in/out *));

PROCEDURE WAIT(VAR s: SIGNAL (* in/out *));

PROCEDURE Awaited(s: SIGNAL  (* in *)): BOOLEAN;

PROCEDURE StartProcess(p:      PROC;    (* in *)
                       wssize: CARDINAL (* in *));

PROCEDURE YIELD;

PROCEDURE Terminate;

PROCEDURE equal(p1:  processid   (* in *);
                p2:  processid   (* in *)): BOOLEAN;

PROCEDURE BeginTACTProcesses;

END TACTProcesses.
