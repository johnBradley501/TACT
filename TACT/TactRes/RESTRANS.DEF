DEFINITION MODULE ResTranslations ;

(* copyright (c) 1987-96 John Bradley, University of Toronto *)

(* Licensed under the Apache License, Version 2.0 (the "License");             *)
(* you may not use this file except in compliance with the License.            *)
(* You may obtain a copy of the License at                                     *)
(* http://www.apache.org/licenses/LICENSE-2.0                                  *)
(*                                                                             *)
(* Unless required by applicable law or agreed to in writing, software         *)
(* distributed under the License is distributed on an "AS IS" BASIS,           *)
(* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    *)
(* See the License for the specific language governing permissions and         *)
(* limitations under the License.                                              *)

FROM Utils      IMPORT BFile,BResultType;
FROM GlobalDefs IMPORT
  (* Type   *) SequenceType,
  (* Contst *) MaxStringLen ;

(*
EXPORT QUALIFIED
 (* type *) XlateTablePointer, XlateEntryPointer, XlateEntryDataType,
            XlateTable, XlateTableRec, XlateDirectionType,
            HandleDuplicateType, LengthDataType, XFileType, XlateStrAny,
            OutProc,
 (* var  *) Int2Scr, Int2Prt, Scr2Int, Int2Alp, Alp2Int, Int2FAlp,
            Int2File,File2Int;
 (* proc *) InsertXlateData, EquateXlateData, DeleteXlateTable,
            DumpXlateTable, XlateLine, FindXlateTable, XOpenInput, XAppend,
            XOpenOutput, XClose, XReadLine, XWriteLine, XWrStr, XWrLn, WrNXlate,
            AddIfAbsent, AddNewXlateListEntry, InitialXlateData;
*)

TYPE
    XlateEntryPointer = POINTER TO XlateEntryDataType; 
    XlateEntryDataTypeType = (StrResult, ModeChange);
    XlateEntryDataType = RECORD
                           InChar: CHAR; 
                           Next: XlateEntryPointer;
                           Failure: XlateEntryPointer;
                           CASE Type:XlateEntryDataTypeType OF
                             StrResult:
                                 OutSeq:  SequenceType;
                                 OutLen: CARDINAL;
                                 OutMode: CHAR;
                           | ModeChange:
                                 NewMode: CHAR;
                           END;
                         END; 
    XlateTable = ARRAY [1C..377C] OF XlateEntryPointer; 
    XlateTableRec = RECORD 
                      XlateTableDat: XlateTable
                    END;
    XlateTablePntr = POINTER TO XlateTableRec;
    XlateModeData = RECORD
                      Table:   XlateTablePntr;
                      Seq:     SequenceType;
                    END;
    XlateModeList = RECORD
                      XlateMode: ARRAY['0'..'9'] OF POINTER TO XlateModeData;
                    END;
    XlateTablePointer = POINTER TO XlateModeList;
    CurrentModeType = RECORD
       ModeIn:    CHAR;
       ModeOut:   CHAR;
    END;

    XlateDirectionType = (To,From,Append,Defective);
    HandleDuplicateType = (GiveError, UpdateEntry, DiscardEntry);
    LengthDataType = RECORD
        Int:        CARDINAL;
        Out:        CARDINAL;
        ApprOut:    CARDINAL;
        END ;
    XlateStrAny = ARRAY[0..MaxStringLen] OF LengthDataType ;
    XFileType = RECORD
        ID:         BFile;
        Dir:        XlateDirectionType;
        XP:         XlateTablePointer;
        ModeData:   CurrentModeType;
        END ;

VAR
    Int2File: XlateTablePointer;
    File2Int: XlateTablePointer;

PROCEDURE SetupTranslations();

PROCEDURE XlateLine(TransType:       XlateTablePointer;
                    BadChar:         CHAR;
                    GivenLine:       ARRAY OF CHAR;
                VAR CurrentMode:     CurrentModeType;
                VAR OutputLine:      ARRAY OF CHAR);

END ResTranslations .
